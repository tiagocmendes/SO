Ficheiros de texto
-> fopen, fclose
read -> fscanf, fgets, fgetc 
write -> fprintf, fprints, fprintc
a
Ficheiros binários
-> fopen, fclose    (+ "b")
read -> fread
write -> fwrite

Ficheiros - sequência ordenada de bytes

FICHEIRO DE TEXTO - sequência de códigos ASCII
Um editor de texto lê cada byte e avalia se pertence ao código ASCII

valor 1048576 = 2**20 - o valor que vai ser guardado no ficheiro é o código ASCII de cada dígito
representado por 7 bytes

FICHEIRO BINÁRIO

0...010...0
11 zeros - 1 - 20 zeros
11 + 1 + 20 = 32
0 16 0 0 - representado por 4 bytes

|- nº elementos lidos
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
        |- ler arrays do ficheiro para a memória
        |- void *ptr (ponteiro para buffer de leitura)
        |- size_t size (tamanho de cada elemento)
        |- size_t nmemb (nº elementos máximo a ler)
        -> Tamanho do buffer (bytes) = size*nmemb 
        
size_t fwrite(void *ptr, size_t size, size_t nmemb, FILE *stream)
        |- escrever (array) de memória para ficheiro
        |- void *ptr (ponteiro para dados a escrever)
        |- size_t size (tamanho de cada elemento)
        |- size_t nmemb (nº elementos a escrever)

typedef struct {
    char n[16];
    int j;
} ci_t;

ci_t v1, a[10];
v1.j = 25;

strcpy(v1.n, "abc");



 NOTA IMPORTANTE - O '.' TEM MAIS PRIORIDADE QUE O '&'


 $sort -read    list.txt 
 $sort -n       list.txt
 $sort -r -k 2  list.txt 

 int getopt(int argc, char *argv[], char optstring)
 |- chamadas sucessivas retornam o char das várias opções
 -> -1 se não há mais oplões
 -> '?' se opção desconhecida

 int optind -> índice em argv do próx argumento a tratar
 getopts em bash
 if(optind < argc)
 {
         strcpy(fname,argv[optind]);
 }